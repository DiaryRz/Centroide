[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "get_stop",
        "importPath": "Main",
        "description": "Main",
        "isExtraImport": true,
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "getCentroidePerCluster",
        "importPath": "Main",
        "description": "Main",
        "isExtraImport": true,
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "DBSCAN",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "listCentroide",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def listCentroide():\n    data = request.get_json() \n    distance_max = 100\n    min_people_per_group = 1\n    response = getCentroidePerCluster(data,distance_max,min_people_per_group)\n    return jsonify(response), 201\n@app.route('/api/plus_proche', methods=['POST'])\ndef plus_proche():\n    data = request.get_json() \n    rep = get_stop(data)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "plus_proche",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def plus_proche():\n    data = request.get_json() \n    rep = get_stop(data)\n    return jsonify(rep) , 201\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/api/listCentroide', methods=['POST'])\ndef listCentroide():\n    data = request.get_json() \n    distance_max = 100\n    min_people_per_group = 1\n    response = getCentroidePerCluster(data,distance_max,min_people_per_group)\n    return jsonify(response), 201\n@app.route('/api/plus_proche', methods=['POST'])\ndef plus_proche():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "calculate_centroid",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def calculate_centroid(cluster):\n    latitudes = [point[0] for point in cluster]\n    longitudes = [point[1] for point in cluster]\n    centroid_lat = sum(latitudes) / len(latitudes)\n    centroid_lon = sum(longitudes) / len(longitudes)\n    return (centroid_lat, centroid_lon)\ndef getCentroidePerCluster(data, distance_max=100, min_point_gpe=1):\n    coordinates = transform_data(data)\n    coords_in_radians = np.radians(coordinates)\n    db = DBSCAN(eps=distance_max/6371.0, min_samples=min_point_gpe, algorithm='ball_tree', metric='haversine').fit(coords_in_radians)",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "getCentroidePerCluster",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def getCentroidePerCluster(data, distance_max=100, min_point_gpe=1):\n    coordinates = transform_data(data)\n    coords_in_radians = np.radians(coordinates)\n    db = DBSCAN(eps=distance_max/6371.0, min_samples=min_point_gpe, algorithm='ball_tree', metric='haversine').fit(coords_in_radians)\n    labels = db.labels_\n    unique_labels = set(labels)\n    results = []\n    for label in unique_labels:\n        if label == -1:\n            continue",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "transform_data",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def transform_data(data):\n    data_field = data.get(\"data\", [])\n    coordinates = [(item[\"lat\"], item[\"lon\"]) for item in data_field]\n    return coordinates\ndef get_stop(data):\n    listData = getCentroidePerCluster(data)\n    processed_data = []\n    for item in listData:\n        print(item.get(\"lat\"))\n        url = f'http://{os.getenv(\"endPoint\")}/api/nearest_point?lat={item.get(\"lat\")}&lon={item.get(\"lon\")}'",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "get_stop",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def get_stop(data):\n    listData = getCentroidePerCluster(data)\n    processed_data = []\n    for item in listData:\n        print(item.get(\"lat\"))\n        url = f'http://{os.getenv(\"endPoint\")}/api/nearest_point?lat={item.get(\"lat\")}&lon={item.get(\"lon\")}'\n        result = requests.get(url)\n        if result.status_code == 201:\n            data = result.json()\n            jsondata = {",
        "detail": "Main",
        "documentation": {}
    }
]